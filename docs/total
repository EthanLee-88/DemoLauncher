
广播种类
普通广播、有序广播、本地广播、粘性广播

序列化的原因
 转换成底层可识别的数据格式

解决滑动冲突的方法
 外部拦截发和内部拦截发，需重写的方法。

room如何看数据
  AS可查看

验证数字证书

IPC的种类

6.0以上的适配

MVP和 MVVM的区别
MVVM双向绑定，相互反应

性能优化

事件分发
   disPatchTouchEvent用于事件分发，内部会调用自身的 onInterceptTouchEvent查看是否拦截
   不拦截则遍历子 View的 dispatchTouchEvent将事件向下传递。
   onInterceptTouchEvent不是每次都会被调用，当Down事件交给子View后，父布局不再拦截后续事件
   也就不再调用 onInterceptTouchEvent方法。所以解决滑动冲突 disPatchTouchEvent方法也可以
   被重写。
   当目标子View为空时，当前又不消耗事件，则调用super的 disPatchTouchEvent方法。

自定义 View的流程

View的绘制流程
  绘制背景：background.draw
  绘制自己（绘制内容）：onDraw
  绘制子View：dispatchDraw
  绘制主题样式

HashMap的扩容
   默认装载因子为0.75，数组容量超过这个百分比时
   数组会扩容两倍。数组扩容会重新计算旧数组中节点的存储位置，带来性能损失。
   HashMap数组扩容会将链表的头结点复制到新数组中，需要重新计算节点所在的数组下标
   当数组容量较小、链表长度又超过8时，不一定会转红黑树，有可能将数组扩容。
   红黑树通过左旋和优选保持平衡，平衡的规则是节点的着色规则。
   * HashMap用数组维护多个短链表是为了方便查找。通过数组下标定位只需遍历短链表。

   ArrayList的扩容会把原数组的内容拷贝到新数组上去

事件分发 dispatch

Activity的启动流程
  根Activity的启动过程会涉及 4个进程
  1、源应用程序 startActivity 向 AMS发消息（通过AIDL）
  2、AMS通过 Socket向zgote进程发消息，创建新的进程
  3、zgote进程创建并启动新进程，并反馈给 AMS
  4、AMS向新进程请求创建并启动应用程序、启动主线程以及创建和启动根Activity

内存扩容
  在Manifest的 application节点加上 android:largeHeap="true"属性，
  就可以向系统申请更大内存空间。应用内存不够用时，系统会为之扩容。

线程池
   核心线程数、最大线程数。核心线程也可以设置超时回收。

   Rxjava订阅所在线程只会在第一次设置时的线程

设计模式

博客

Android 11 隐私特性
   1、新增一次性权限选项，授予后只能使用一次
   2、权限自动重置，应用数月未使用，授予的权限将被收回
   3、后台使用位置信息需要额外申请权限

   Android 10：
   新增“仅这一次”权限，下次就没了。
   新增后台应用位置访问功能
   新增剪贴板内容访问权限


线上内存优化
协变和异变
网络优化
OKHttp
软引用的使用场景

用户登录及上传一张图片用 post还是 get
GC 会不会一次就被回收
弱引用使用场景
为什么说内存泄漏会影响性能
用户登录信息安全

onNewIntent
LinkHashMap

应用打包

觉得自己能力怎么样

HashMap的构造函数参数代表数组容量和装载因子
ConcurrentHashMap在 java1.7用可重入锁实现同步，在java1.8用同步代码块实现同步

事件分发 mFirstTouchTarget是一个链表，是因为考虑到多点触控

OKHTTP取消一个请求
请求时可以打一个tag，要取消时可以遍历任务调度模块的任务队列
取出相应的 Call对象调用 cancel方法

Rxjava的 map用于对事件进行一对一转换，flatmap用于对事件进行一对多或者多对多转换

提高进程优先级
AndroidManifest.xml中配置persistent属性

位图所占内存 ：宽 * 高 * 一个像素点所赞内存

代理模式只是代理者对被代理者的简单代理，装饰模式注重对被装饰者的功能的扩招

状态模式内部根据当前不同的状态进行相应的操作，操作过程中有状态切换的过程，一般情况下
不向用户提供改变状态的方法，最多提供状态初始化的操作。策略模式会提供给用户不同的策略
以供用户选择，不同策略执行结果不一样。

弱引用缓存和 LruCache 之间存在缓存的转换关系，图片从正在使用状态转为不使用状态，
Glide 将图片从弱引用缓存移除然后缓存到 LruCache 中，假如 LruCache 中的某张图片现在需要使用，
则图片从 LruCache 中移除缓存到弱引用缓存中，弱引用缓存中保存的是正在使用的图片。



Fragment 的 onAttach方法什么时候调用    : onAttach - onCreate - onCreateView - onViewCreated - onStart - onResume

Glide 的缓存是否可以自定义    ： 可以， 写一个类，实现 GlideModel接口，接口里有一个 applyOptions方法，有一个参数 GlideBuilder
                                   可以用这个对象去设置磁盘缓存和内存缓存，以及图片质量等。这个 GlideModel类需要配置到 manifests
                                   的 application 节点下。

Glide 缓存的 key值都有哪些部分组成    ：有差不多 10个参数组成，包括图片的 url以及图片宽高等。Glide里有一个 GlideUrl类，可以继承这个类，
                                   然后重写里面获取 Url的方法。

线程池的使用场景

SP 为什么会导致 ANR，SP可以用什么替换
为什么 apply方法也会出现 ANR

 -- sp文件创建后，会单独使用一个线程来加载解析对应的sp文件，但是当UI线程尝试访问sp中内容时，
    如果sp文件还未被完全加载解析到内存，此时UI线程会被block，直到sp文件被完全加载到内存中为止。
 -- 前期应用可以使用sp来做跨进程通信，在组件销毁或其他声明周期的同时为了确保当前这个写入任务
    必须在当前这个组件的生命周期完成写入，此时主线程会在组件销毁或者组件暂停的生命周期内等待sp完全写入到对应的文件中。
 -- 替换，腾讯的 MMKV

RecyclerView 的缓存机制

RecyclerView 的局部刷新的方法
notifyItemChanged

长按事件 和 点击事件的循序，为什么
长按点击的时候默认会触发点击事件，android系统是优先点击的，
并且没有返回值；而长按事件是有返回值的，如果返回false，两个事件都会有响应，
如果返回true则只响应长按事件。


implementation 私有依赖
api 共有依赖，支持依赖传递
依赖冲突可以手动屏蔽第三方库的依赖或升级为 Android X

Android启动速度优化
主要思路是在 Application的 onCreate方法里减少好事操作
比如第三方 SDK初始化，可以用懒加载的方式
启动速度计算，可以用命令行冷启动一个 MainActivity，这样就会有时间打印
或者可以在 Application 和 Activity的初始化节点打印时间戳

启动白屏问题
一个优化启动速度，或者可以自定义一个 Activity的样式，替换系统的默认样式

Android大概打包流程：
编译布局文件生成R.java文件 - 编译 AIDL文件生成java文件 - 编译 java文件生成 class文件 - class文件转换成 dex文件
dex文件打包成 apk文件 - 对 apk文件进行签名

弱网优化 ：
请求资源压缩
根据网络状况加载图片，网络不好可以加载缩略图
合并请求
缓存兜底
UI 等待优化

图片懒加载的优点 ：
按需加载，减少服务器压力。有利于加载速度提升、节约流量。

Activity的生命周期用到了什么设计模式
同步代码块 原理
一个数组构造成平衡二叉树的时间复杂度
组件化

Android应用怎么解决启动白屏问题

