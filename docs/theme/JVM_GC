
     /***********************  java虚拟机  ***************************/

     类加载：加载、链接（验证、准备、解析）、初始化。
             加载 ：查找并加载Class文件。

             链接 ：验证：验证类型的正确性。
             准备 ：为静态变量分配内存并赋默认值。
             解析 ：虚拟机将常量池的符号引用替换为直接引用。

             初始化：为静态变量赋初始值。

     类加载过程中，内存会生成一个代表该类的Class对象，并保存在方法区。

     运行时数据区: 程序计数器、java虚拟机栈、本地方法栈、java堆、方法区（元空间）

             程序计数器：线程私有，用于记录当前正在运行的字节码指令地址，以确保
                        并发线程切换后能正确执行程序。
             java虚拟机栈: 线程私有，存储线程中java方法的调用状态，局部变量、参数、
                        中间值等。
             本地方法栈： 线程私有，与java虚拟机栈类似，不过存的是本地方法的调用状态。
             java堆 ：线程共享，存放对象实例。
             方法区：线程共享、用于存放已被java虚拟机加载的类的结构信息。包括常量池。

     对象的创建过程：
             （1）检查该类是否已经被加载，使用双亲委托的形式，遍历父类加载器。
             若未加载则先加载。
             （2）分配内存空间，为该对象分配内存空间，-指针碰撞、空闲列表。
             （3）处理安全并发问题。
             （4）初始化（格式化）内存空间。
             （5）写入对象头信息，类型、HashCode。

     垃圾收集 ：垃圾标记算法、垃圾收集算法

            垃圾标记算法：引用计数法、根搜索算法。
                 引用标记法无法解决循环引用的问题，所以主流采用根搜索算法。

            垃圾收集算法： 标记-清除算法 ， 复制算法 ， 标记-压缩算法
                    分代收集算法 - Eden、survivor to 、 survivor from

     垃圾被标记后会进入收集阶段，不会马上被收集，如果重写了finalize方法，则会调用，
     方法调用之后无实际性进展，则该对象被回收。