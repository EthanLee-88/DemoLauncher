

Activity.java -- startActivity -> startActivityForResult

Instrumentation.ActivityResult.java -- execStartActivity

// IADL IPC通信

ActivityTaskManagerService.java -- startActivity --> startActivityAsUser --> startActivityAsUser

ActivityStartController.java -- obtainStarter (享元模式获取 ActivityStarter对象)

ActivityStarter.java -- execute --> executeRequest --> startActivityUnchecked -- startActivityInner

RootWindowContainer.java -- resumeFocusedStacksTopActivities

ActivityStack.java -- resumeTopActivityUncheckedLocked --> resumeTopActivityInnerLocked --> resumeTopActivityInnerLocked

ActivityStackSupervisor.java -- startSpecificActivity --> realStartActivityLocked

ActivityTaskManagerService.java -- getLifecycleManager

ClientLifecycleManager.java -- scheduleTransaction (startSetupActivity)

ClientTransaction.java -- schedule

// IPC
IApplicationThread.java -- scheduleTransaction

ActivityThread.java -- scheduleTransaction

ClientTransactionHandler.java -- scheduleTransaction

ClientTransactionHandler.java -- transaction -- sendMessage

ActivityThread.java -- handleMessage

TransactionExecutor.java -- execute -- executeCallbacks

LaunchActivityItem.java -- execute

ActivityThread.java -- handleLaunchActivity --performLaunchActivity

Instrumentation.java -- callActivityOnCreate

Activity.java -- performCreate



public class AMS {

    // Activity.java
    public void startActivity(Intent intent, @Nullable Bundle options) {
        if (mIntent != null && mIntent.hasExtra(AutofillManager.EXTRA_RESTORE_SESSION_TOKEN)
                && mIntent.hasExtra(AutofillManager.EXTRA_RESTORE_CROSS_ACTIVITY)) {
            if (TextUtils.equals(getPackageName(),
                    intent.resolveActivity(getPackageManager()).getPackageName())) {
                // Apply Autofill restore mechanism on the started activity by startActivity()
                final IBinder token =
                        mIntent.getIBinderExtra(AutofillManager.EXTRA_RESTORE_SESSION_TOKEN);
                // Remove restore ability from current activity
                mIntent.removeExtra(AutofillManager.EXTRA_RESTORE_SESSION_TOKEN);
                mIntent.removeExtra(AutofillManager.EXTRA_RESTORE_CROSS_ACTIVITY);
                // Put restore token
                intent.putExtra(AutofillManager.EXTRA_RESTORE_SESSION_TOKEN, token);
                intent.putExtra(AutofillManager.EXTRA_RESTORE_CROSS_ACTIVITY, true);
            }
        }
        if (options != null) {
            // -1 表示不需要回调结果
            startActivityForResult(intent, -1, options);
        } else {
            // Note we want to go through this call for compatibility with
            // applications that may have overridden the method.
            startActivityForResult(intent, -1);
        }
    }

    public void startActivityForResult( Intent intent, int requestCode,
                                       @Nullable Bundle options) {
        if (mParent == null) {
            options = transferSpringboardActivityOptions(options);
            Instrumentation.ActivityResult ar =
                    mInstrumentation.execStartActivity(
                            this, mMainThread.getApplicationThread(), mToken, this,
                            intent, requestCode, options);
            if (ar != null) {
                mMainThread.sendActivityResult(
                        mToken, mEmbeddedID, requestCode, ar.getResultCode(),
                        ar.getResultData());
            }
            if (requestCode >= 0) {
                mStartedActivity = true;
            }
            cancelInputsAndStartExitTransition(options);
            // TODO Consider clearing/flushing other event sources and events for child windows.
        } else {
            if (options != null) {
                mParent.startActivityFromChild(this, intent, requestCode, options);
            } else {
                // Note we want to go through this method for compatibility with
                // existing applications that may have overridden it.
                mParent.startActivityFromChild(this, intent, requestCode);
            }
        }
    }

    // ***********************************
    // Instrumentation.ActivityResult.java
    public Instrumentation.ActivityResult execStartActivity(
            Context who, IBinder contextThread, IBinder token, Activity target,
            Intent intent, int requestCode, Bundle options) {
        IApplicationThread whoThread = (IApplicationThread) contextThread;
        Uri referrer = target != null ? target.onProvideReferrer() : null;
        if (referrer != null) {
            intent.putExtra(Intent.EXTRA_REFERRER, referrer);
        }
        //......
        // ActivityTaskManager.getService() 获取 AMS的代理对象。这里通过AIDL 和AMS通信
        try {
            intent.migrateExtraStreamToClipData(who);
            intent.prepareToLeaveProcess(who);
            int result = ActivityTaskManager.getService().startActivity(whoThread,
                    who.getBasePackageName(), who.getAttributionTag(), intent,
                    intent.resolveTypeIfNeeded(who.getContentResolver()), token,
                    target != null ? target.mEmbeddedID : null, requestCode, 0, null, options);
            checkStartActivityResult(result, intent);

            return null;
        }

        // ActivityTaskManager.java
        public static IActivityTaskManager getService () {
            return IActivityTaskManagerSingleton.get();
        }
        private static final Singleton<IActivityTaskManager> IActivityTaskManagerSingleton =
                new Singleton<IActivityTaskManager>() {
                    @Override
                    protected IActivityTaskManager create() {
                        // 获取系统服务的 Binder
                        final IBinder b = ServiceManager.getService(Context.ACTIVITY_TASK_SERVICE);
                        return IActivityTaskManager.Stub.asInterface(b);
                    }
                };

        // ActivityTaskManagerService.java
        public final int startActivity (IApplicationThread caller, String callingPackage,
                String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,
                String resultWho,int requestCode, int startFlags, ProfilerInfo profilerInfo,
                Bundle bOptions){
            return startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,
                    resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions,
                    UserHandle.getCallingUserId());
        }
        public int startActivityAsUser (IApplicationThread caller, String callingPackage,
                String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,
                String resultWho,int requestCode, int startFlags, ProfilerInfo profilerInfo,
                Bundle bOptions,int userId){
            return startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,
                    resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId,
                    true /*validateIncomingUser*/);
        }
        private int startActivityAsUser (IApplicationThread caller, String callingPackage,
                @Nullable String callingFeatureId, Intent intent, String resolvedType,
                IBinder resultTo, String resultWho,int requestCode, int startFlags,
        ProfilerInfo profilerInfo, Bundle bOptions,int userId, boolean validateIncomingUser){
            // 判断调用者进程是否被隔离
            assertPackageMatchesCallingUid(callingPackage);
            // 判断调用者是否有权限
            enforceNotIsolatedCaller("startActivityAsUser");
            userId = getActivityStartController().checkTargetUser(userId, validateIncomingUser,
                    Binder.getCallingPid(), Binder.getCallingUid(), "startActivityAsUser");

            // 享元模式获取 ActivityStarter实例 并调用 execute()方法
            return getActivityStartController().obtainStarter(intent, "startActivityAsUser")
                    .setCaller(caller)
                    .setCallingPackage(callingPackage)
                    .setCallingFeatureId(callingFeatureId)
                    .setResolvedType(resolvedType)
                    .setResultTo(resultTo)
                    .setResultWho(resultWho)
                    .setRequestCode(requestCode)
                    .setStartFlags(startFlags)
                    .setProfilerInfo(profilerInfo)
                    .setActivityOptions(bOptions)
                    .setUserId(userId)
                    .execute();

        }

        // ActivityStartController.java
        ActivityStarter obtainStarter (Intent intent, String reason){
            return mFactory.obtain().setIntent(intent).setReason(reason);
        }

        //ActivityStarter.DefaultFactory.java
        // 使用了享元模式创建 ActivityStarter对象
        public ActivityStarter obtain () {
            ActivityStarter starter = mStarterPool.acquire();
            if (starter == null) {
                starter = new ActivityStarter(mController, mService, mSupervisor, mInterceptor);
            }
            return starter;
        }

        // ActivityStarter.java
        int execute () {

            res = executeRequest(mRequest);

        }
        //
        private int executeRequest (Request request){
            // ...........
            mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,
                    request.voiceInteractor, startFlags, true /* doResume */, checkedOptions, inTask,
                    restrictedBgActivity, intentGrants);
            return mLastStartActivityResult;
        }
        //
        private int startActivityUnchecked ( final ActivityRecord r, ActivityRecord sourceRecord,
                IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,
        int startFlags, boolean doResume, ActivityOptions options, Task inTask,
        boolean restrictedBgActivity, NeededUriGrants intentGrants){
            int result = START_CANCELED;
            try {
                //......
                result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,
                        startFlags, doResume, options, inTask, restrictedBgActivity, intentGrants);
            } finally {

            }
            // ......
            return result;
        }
        //
        int startActivityInner ( final ActivityRecord r, ActivityRecord sourceRecord,
                IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,
        int startFlags, boolean doResume, ActivityOptions options, Task inTask,
        boolean restrictedBgActivity, NeededUriGrants intentGrants){
            // ......
            mRootWindowContainer.resumeFocusedStacksTopActivities(
                    mTargetStack, mStartActivity, mOptions);
            return START_SUCCESS;
        }

        //RootWindowContainer.java
        boolean resumeFocusedStacksTopActivities (
                ActivityStack targetStack, ActivityRecord target, android.app.ActivityOptions
        targetOptions){

            final ActivityStack focusedStack = display.getFocusedStack();

            result |= focusedStack.resumeTopActivityUncheckedLocked(target, targetOptions);
            // ......
            return result;
        }

        // ActivityStack.java
        boolean resumeTopActivityUncheckedLocked (ActivityRecord prev, ActivityOptions options){
            // ......
            boolean result = false;
            try {
                // Protect against recursion.
                mInResumeTopActivity = true;
                result = resumeTopActivityInnerLocked(prev, options);
                // ......
            } finally {
                mInResumeTopActivity = false;
            }
            return result;
        }

        private boolean resumeTopActivityInnerLocked (ActivityRecord prev, ActivityOptions options){
            mStackSupervisor.startSpecificActivity(next, true, true);
            // .......
            return true;
        }

        // ActivityStackSupervisor.java
        void startSpecificActivity (ActivityRecord r,boolean andResume, boolean checkConfig){
            // Is this activity's application already running?
            final WindowProcessController wpc =
                    mService.getProcessController(r.processName, r.info.applicationInfo.uid);

            boolean knownToBeDead = false;
            if (wpc != null && wpc.hasThread()) {
                try {
                    realStartActivityLocked(r, wpc, andResume, checkConfig);
                    return;
                } catch (RemoteException e) {
                }
            }
            mService.startProcessAsync(r, knownToBeDead, isTop, isTop ? "top-activity" : "activity");
        }

        boolean realStartActivityLocked (ActivityRecord r, WindowProcessController proc,
        boolean andResume, boolean checkConfig) throws RemoteException {

            clientTransaction.addCallback(LaunchActivityItem.obtain(new Intent(r.intent),
                    System.identityHashCode(r), r.info,
                    // TODO: Have this take the merged configuration instead of separate global
                    // and override configs.
                    mergedConfiguration.getGlobalConfiguration(),
                    mergedConfiguration.getOverrideConfiguration(), r.compat,
                    r.launchedFromPackage, task.voiceInteractor, proc.getReportedProcState(),
                    r.getSavedState(), r.getPersistentSavedState(), results, newIntents,
                    dc.isNextTransitionForward(), proc.createProfilerInfoIfNeeded(),
                    r.assistToken, r.createFixedRotationAdjustmentsIfNeeded()));

            // Set desired final state.
            final ActivityLifecycleItem lifecycleItem;
            if (andResume) {
                lifecycleItem = ResumeActivityItem.obtain(dc.isNextTransitionForward());
            } else {
                lifecycleItem = PauseActivityItem.obtain();
            }
            clientTransaction.setLifecycleStateRequest(lifecycleItem);

            // Schedule transaction.
            mService.getLifecycleManager().scheduleTransaction(clientTransaction);
            return true;
        }

        // ClientLifecycleManager.java
        void scheduleTransaction (ClientTransaction transaction) throws RemoteException {
            final IApplicationThread client = transaction.getClient();
            // ....
            transaction.schedule();
            if (!(client instanceof Binder)) {
                transaction.recycle();
            }
        }

        // ClientTransaction.java
        /** Target client. */
        private IApplicationThread mClient;
        public void schedule () throws RemoteException {
            mClient.scheduleTransaction(this);
        }

        // ActivityTaskManagerService.java
//        public void requestPictureInPictureMode(IBinder token) throws RemoteException {
//            final ActivityRecord activity = ActivityRecord.forTokenLocked(token);
//            try {
//                final ClientTransaction transaction = ClientTransaction.obtain(
//                        activity.app.getThread(),
//                        activity.token);
//                transaction.addCallback(EnterPipRequestedItem.obtain());
//                getLifecycleManager().scheduleTransaction(transaction);
//            }
//        }
        // ActivityThread.java
        @Override
        public void scheduleTransaction (ClientTransaction transaction) throws RemoteException {
            ActivityThread.this.scheduleTransaction(transaction);
        }

        // ClientTransactionHandler.java
        void scheduleTransaction (ClientTransaction transaction){
            transaction.preExecute(this);
            sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);
        }

        // ActivityThread.java
        {
        case EXECUTE_TRANSACTION:
        final ClientTransaction transaction = (ClientTransaction) msg.obj;
        mTransactionExecutor.execute(transaction);
        if (isSystem()) {
            // Client transactions inside system process are recycled on the client side
            // instead of ClientLifecycleManager to avoid being cleared before this
            // message is handled.
            transaction.recycle();
        }
        break;
    }
        // TransactionExecutor.java
        public void execute(ClientTransaction transaction) {

            executeCallbacks(transaction);

        }
        public void executeCallbacks(ClientTransaction transaction) {
            for (int i = 0; i < size; ++i) {
                final ClientTransactionItem item = callbacks.get(i);

                item.execute(mTransactionHandler, token, mPendingActions);
                item.postExecute(mTransactionHandler, token, mPendingActions);

            }
        }

        // LaunchActivityItem.java
        public void execute(ClientTransactionHandler client, IBinder token,
                PendingTransactionActions pendingActions) {
            Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, "activityStart");
            ActivityClientRecord r = new ActivityClientRecord(token, mIntent, mIdent, mInfo,
                    mOverrideConfig, mCompatInfo, mReferrer, mVoiceInteractor, mState, mPersistentState,
                    mPendingResults, mPendingNewIntents, mIsForward,
                    mProfilerInfo, client, mAssistToken, mFixedRotationAdjustments);
            client.handleLaunchActivity(r, pendingActions, null /* customIntent */);
            Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);
        }

        @Override
        public void postExecute(ClientTransactionHandler client, IBinder token,
                PendingTransactionActions pendingActions) {
            client.countLaunchingActivities(-1);
        }

        // ActivityThread.java
        public Activity handleLaunchActivity(ActivityClientRecord r,
                PendingTransactionActions pendingActions, Intent customIntent) {
            final Activity a = performLaunchActivity(r, customIntent);
            return a;
        }
        /**  Core implementation of activity launch. */
        private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {
            activity.mCalled = false;

            if (r.isPersistable()) {
                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);
            } else {
                mInstrumentation.callActivityOnCreate(activity, r.state);
            }
        }
        // Instrumentation.java
        public void callActivityOnCreate(Activity activity, Bundle icicle,
                PersistableBundle persistentState) {
            prePerformCreate(activity);
            activity.performCreate(icicle, persistentState);
            postPerformCreate(activity);
        }

        // Activity.java
        final void performCreate(Bundle icicle, PersistableBundle persistentState) {

            if (persistentState != null) {
                onCreate(icicle, persistentState);
            } else {
                onCreate(icicle);
            }
        }
  }