
  /************************  设计模式  *****************************/

 1.	了解事件分发机制，解决常见滑动冲突。

  设计模式的六大原则 ：

      单一职责 ：一个类具有单一的职责，类就是一类方法集合。
      开放封闭 ：模块的功能可以扩展，但不能修改。
      里氏替换 ：将父类抽象化，将子类的对象赋给父类的声明，说白了就是继承
                 和多态。
      依赖倒置 ：两个模块通过接口或者抽象类实现解耦，两个模块都依赖于抽象
      迪米特原则 ：软件实体之间尽量减少发生相互作用，引用第三者以降低耦合度
      接口隔离原则 ：接口的方法尽量少。

  单例模式 ：
           饿汉模式：类初始化时即创建单例对象。
           懒汉非安全模式 ：有一个判空过程，但线程不安全。
           懒汉安全模式：将方法声明为同步方法，有额外的同步开销。
           双重检查模式：多一层判空，避免了不必要的同步开销，同时线程安全。
           静态内部类模式：在静态内部类进行类加载时创建对象，与懒汉模式有类似之处。
           枚举模式：应对反序列化时重新生成对象。

  工厂模式 ：一般使用单工厂模式，将产品的工厂的行为抽象化。单工厂模式下，
           客户端向工厂提交产品的类名，工厂将未知的产品类型声明为泛型，然后
           通过反射的手段创建产品的实例再返回。

  建造者模式 ：用于创建一个复杂对象的工具Builder，用户可以通过Builder来进行一系列
              的链式操作来组装对象。方便了用户，对除了建造者对象，对虚拟机不友好。

  代理模式 ：分静态代理和动态代理。动态代理下，java提供了动态代理接口InvocationHandler
             此外，通过Proxy类创建被代理对象。

  装饰者模式 ：与代理模式有类似之处，不同的是，装饰者扩展了被装饰者的功能。

  享元模式 ：共享元数据（对象），内部维护了一个哈希表，保存被创建过的对象，享元工厂
            通过key值查找并返回对象，若没有则创建。

  外观模式 ：将一个模块的内部实现细节隐藏，只对上层提供简单的调用接口。OkHttpClient
            等就是一个外观类，将子系统之间的内部联系隐藏，比如任务队列和线程池的交互。

  观察者模式：将观察者保存下来，就是一个注册过程，事件总线用于跨系统消息交换的场景。