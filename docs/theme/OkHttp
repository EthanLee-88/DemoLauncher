
/******
 * OkHttp 源码解析
 *
 *  API的方法发起请求，底层通过Dispatcher调度器来实现并发请求的管理，
 *  调度器包含并发执行任务数、主机数以及三个队列。
 *  三个队列分别用于装载等待请求以及正在请求的同步及异步请求。
 *  (OkHttp默认最大并行任务数 < 64 , 同一主机在线程池的最大任务数 < 5 )
 *
 *  API顶层Call的异步请求操作enqueue，在底层实际上是将请求打包成AsyncCall再交由
 *  Dispatcher来调度的，而AsyncCall就是一个Runnable，Dispatcher执行请求任务的时候
 *  就是将此Runnable丢给线程池执行。
 *  当并发请求数量过大时Dispatcher会将Runnable放入等待队列。Dispatcher由Call的实现类RealCall
 *  来获取。
 *  同步请求操作下，请求并不会交由Dispatcher调度的线程池中执行，而是在Call下直接进行网络请求，
 *  串行阻塞的。
 *  API底层的网络请求交由Call的getResponseWithInterceptorChain方法执行。
 *
 *  缓存策略 ： OkHttp采用基于LRU算法的缓存策略。
 *           缓存策略主要分两个部分来处理。第一部分是不联网的情况下，检查是否有缓存，若没有则
 *           返回504错误，若有可用缓存则使用缓存。
 *           第二部分是联网的情况下，在有本地缓存的情况下，会检查Http的的响应报头，如果缓存还在
 *           有效期内则使用缓存，并联网更新缓存。如果缓存失效则直接联网获取。
 *           三级缓存的操作在 CacheInterceptor 类里。
 *
 *  OkHttp复用连接池以维持长链接，支持5个并发Socket连接，KeepAlive时间是5分钟，当连接空闲超过5
 *  分钟后便被回收。

     连接池中创建了一个核心线程数为0，不限最大线程数的线程池。与此同时，使用双端队列Deque保存复用
     的socket连接。
     连接池在创建OkHttpClient时实例化 。最后保存在双端队列Deque的Socket连接会被包装成RealConnection
     对象。当有新任务符合数量条件执行时会遍历连接池队列Deque，若新任务的地址与空闲连接的复用Socket
     的地址相等，则直接使用闲置Socket进行请求。
     连接池使用循环的方式计数，通过判断Socket（Connection）是否超时，或空闲线程数是否超过5个，来决定
     是否相应销毁闲置的线程，一旦满足条件销毁，则将闲置连接从队列中移除。
 * *******/