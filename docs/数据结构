/************** 数据结构 ****************/

1、常用数据结构简介
   表
   栈：类似于死胡同，先进后出。
   队列：类似于管道，先进先出。

2、并发集合了解哪些？

3、列举java的集合以及集合之间的继承关系
   Collection子类 : Set  : HashSet : LinkedHashSet
                           SortSet : TreeSet
                           EnumSet

                    Queue : Deque : ArrayDeque
                            PriorityQueue

                    List : ArrayList
                           LinkedList
                           Vector : stack

   Map 子类 : HashMap : LinkedHashMap
              HashTable : Properties
              SortMap : TreeMap
              WeekHashMap
              IdentityHashMap
              EnumMap

  Set  : Set集合不允许包含相同元素，通过分别调用元素的hashCode方法和equals判断元素是否已存在集
            合中。
  HashSet : HashSet按Hash算法存储元素。HashSet元素是无序的，<非线程安全>的。HashSet不允许
            包含相同的元素，并通过分别调用元素的hashCode方法和equals判断元素是否已存在集
            合中。hashCode方法可以更快地查询集合中的元素。
  LinkedHashSet : LinkedHashSet是HashSet的子类。LinkedHashSet维护了元素的迭代顺序，元素
            顺序与添加顺序一致。性能比HashSet略低，但迭代访问元素性能好。
  SortSet : 接口。
  TreeSet : SortSet接口的实现类。TreeSet可以实现集合中的元素处于排序状态，但对象元素类型
            必须实现Comparator重写compareTo用于比较元素大小。元素排序默认是升序。
            很多java类都已经实现该接口。TreeSet需确保元素类型相等。compareTo方法用于比较
            元素大小，返回0则表示两对象相等，返回正数则表明方法调用者大。可以定制TreeSet
            排序规则。

  List : List是可重复的、有序的集合，List通过equals方法即可判断两个元素是否相等。
  ArrayList : ArrayList是List的典型实现类，底层维护了一个<长度可变的数组>。ArrayList不是线
            程安全的，但可以使用工具类Collections将其包装秤<非线程安全>的。
  Vector -> Stack : Vector有一个子类stack，遵循后进先出LIFO的。Stack和Vector都是线程安全的，
            两者性能差且比较古老，不推荐使用。
  LinkedList ：内部以链表的形式维护了一个双端队列，即可像List那样按索引来访问，又可以实现“栈”
            和“队列”这两种数据结构。因为其内部是以链表link的形式实现，所以比内部用数组Array
            实现的集合的随机访问性能较差。但插入、删除的性能出色，只需改变链表link里的指针即可。

  Queue ：  用于模拟队列这种数据结构，遵循先进先出规则。
  Dequeue-> ArrayDeque : 作为Dequeue接口的实现类，是一个双端队列，允许分别从两端访问队列的元
            素。所以该队列既有先进先出<FIFO>的能力，也有后进先出<LIFO>的能力。既可以实现“队列”
            这种数据结构，也可以实现“栈”这种数据结构。
  PriorityQueue ：也是典型的元素从尾部进，从头部出这样的逻辑。但PriorityQueue对队列的大小顺序
            进行了排序。默认是升序排序，也可以自定义排序规则。

  性能分析： 底层用数组Array实现的线性集合随机访问性能好，但增删操作要改变底层数组大小，性能较差。
            底层以链表Link实现的线性集合随机访问性能稍差（用迭代器），但增删性能好（用指针操作），
            所以适合频繁读写操作的情景。

  Map ： 键值对保存数据的集合。
  HashMap 、Hashtable : HashMap是线程不安全的，Hashtable是线程安全的。性能不由分说，不安全可以
         使用工具类包装。Map存取对象的方式和Set集合相似，都是通过hasCode和equals方法判断。不同
         的是Map判断Key值，而Set判断元素本身。
  LinkedHashMap : 内部使用链表的形式维护了元素的插入顺序。
  Properties : 是Hashtable的子类，是可以将键值对在磁盘进行读写的一个工具类。
  SortedMap -> TreeMap :  与SortedSet对TreeSet一样，TreeMap也实现了对集合元素的大小排序，需要
         元素类型实现Comparable接口重写compareTo方法，用于比较元素大小，比较大小的逻辑同样要与
         equals方法一致。以维护Set接口Key值不重复的规则。
  IdentityHashMap : 与 HashMap基本相同，只是使用== 来替代equals方法来判断Key值是否相等。
  EnumMap ：使用同一个枚举类的枚举值来作为Key值。

 sparseArray : key值是int型，按大小排序，可二分查找。


4、集合类以及集合框架
5、容器类介绍以及之间的区别
6、List,Set,Map的区别  :      随机访问性、有序性、元素是否可重复，映射性。
7、List和Map的实现方式以及存储方式 :      可变数组、链表、键值对。
8、HashMap的实现原理 :
   底层有数组和链表组成，数组当中的每个元素都是链表，当发生碰撞时链表会扩容，新的元素会从
   链表尾部插入，链表超度超过8时就把链表转成红黑树。hashCode用于定位数组的下标，
   equals用于查找对象在链表的位置，用于定性。
   默认数组长度为16，可以通过构造器指定长度，默认装载因子为0.75，数组容量超过这个百分比时
   数组会扩容两倍。数组扩容会重新计算旧数组中节点的存储位置，带来性能损失。
   当节点链表长度超过8便将链表转换成红黑树是因为，要解决长链表查询深度的问题。（JDK8特性）
9、HashMap数据结构？ :     哈希表结构，数组+链表。链表长度超过8时，链表转换为红黑树。
10、HashMap源码理解
11、HashMap如何put数据
12、HashMap怎么手写实现？
13、ConcurrentHashMap的实现原理        加锁粒度，对每个节点（链表）加锁，只要不是操作同一个
                                       节点，就可以实现并发插入。
14、ArrayMap和HashMap的对比
15、HashTable实现原理 :      线程安全
16、TreeMap具体实现 :      实现接口CompareTo方法
17、HashMap和HashTable的区别 :      线程安全与线程不安全
18、HashMap与HashSet的区别 :        键值对，HashSet通过对象本身访问元素
19、HashSet与HashMap怎么判断集合元素重复？      : hashCode及equals方法
20、集合Set实现Hash怎么防止碰撞         : hashCode与equals方法逻辑保持一致
21、ArrayList和LinkedList的区别，以及应用场景         : 底层实现、随机访问、双端队列
22、数组和链表的区别
    链表由一系列节点组成，这些节点的内存不必项链，可避免数组那样的插入和删除开销。
23、二叉树的深度优先遍历和广度优先遍历的具体实现
24、堆的结构  :     完全二叉树，大小从上至下递增或递减。
25、堆和树的区别           堆是树的一种特殊情形，通常被看做是一颗完全二叉树的数组对象。
26、堆和栈在内存中的区别是什么       堆是指程序运行时申请的动态内存，而栈只是指一种使用堆的方法。
27、什么是深拷贝和浅拷贝
28、手写链表逆序代码
29、讲一下对树，B+树的理解
30、讲一下对图的理解
31、判断单链表成环与否？
32、链表翻转
33、合并多个单有序链表

1、为什么集合类没有实现接口Cloneable和Serializable
2、什么事迭代器（Iterator）
3、Comparable和Comparator接口是干什么的？


* 二叉树 : 每个节点最多只能有两个儿子。
*二叉查找树 : 每个节点的左子树所有的值必须小于该节点，而其右子树中的所有的值必须大于该节点。
*红黑树 : 具有着色性质的二叉查找树。
*完全二叉树 : 从根节点开始，从上至下、从左至右添加节点并编号的二叉树。
*满二叉树 : 完全二叉树的特殊情形，除底层节点外，其他每一层的所有节点都有两个子节点的二叉树。
*堆 : 是一颗完全二叉树的数组对象。堆有此特点: 每个节点的值总是小于其子节点的值，或某个节点
      的值总是大于其子节点的值。根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆
      或小根堆。