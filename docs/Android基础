
1、四大组件是什么
2、四大组件的生命周期和简单用法
   系统默认不会向已停止的应用发送广播，系统只会根据过滤条件向特定的应用发送广播。

3、Activity之间的通信方式
   在 intent 里有putXXX（）各种方法，包括各种数据类型及Bundle（比如putExtras）,此外还可以put
   一些列表。在另外的Activity里可以用getIntent方法获取Intent。
   startActivityForResult : onActivityResult : setResult
   EvenBus

4、Activity各种情况下的生命周期
   正常情况下 : onCreate -> onRestart -> onStart -> onResume -> onPause -> onStop -> onDestroy
               当生命周期走过onStop但未被销毁时，重新打开Activity会走onRestart生命周期，比如返回
               桌面或从另一个Activity返回。显示对话框时Activity失去焦点，由前台切换到后台，但依然
               可见（调用了onPause，但未stop）。
   异常情况 : 异常销毁时，Activity会在 onStop之前调用 onSaveInstanceState方法保存Bundle数据，然
             后在重建时 onStart之后调用 onRestoreInstanceState回复数据。Bundle数据也会在 onCreate
             中回调，当Activity时正常启动时，onCreate的Bundle数据为空。
5、横竖屏切换的时候，Activity 各种情况下的生命周期

6、Activity与Fragment之间生命周期比较
7、Activity上有Dialog的时候按Home键时的生命周期
   此时处于暂停状态（失去焦点，不在前台，但依然部分可见）生命周期 : onStop->onRestart->onStart

8、两个Activity 之间跳转时必然会执行的是哪几个方法？
   onPause -> onCreate -> onStart -> onResume -> onStop

9、前台切换到后台，然后再回到前台，Activity生命周期回调方法。弹出Dialog，生命值周期回调方法。
   onPause -> onResume

10、Activity的四种启动模式对比
    标准模式 、 栈顶复用 、栈内复用、单实例模式（Activity位于独立任务栈中）

11、Activity状态保存于恢复
    onSaveInstanceState -> onRestoreInstanceState

12、fragment各种情况下的生命周期
    整体的生命周期流程与Activity差不多，有一些特有的方法 : onAttached 、onActivityCreated、
    onCreateView 、onViewCreated 、onDestroyView等。

13、Fragment状态保存startActivityForResult是哪个类的方法，在什么情况下使用？
14、如何实现Fragment的滑动？
15、fragment之间传递数据的方式？
    fragment.setArguments();

16、Activity 怎么和Service 绑定？
    bindService（），需传一个ServiceConnection实例。

17、怎么在Activity 中启动自己对应的Service？
    startService（）；

18、service和activity怎么进行数据交互？
    Messenger、进程间通信AIDL。

19、Service的开启方式

20、请描述一下Service 的生命周期
    stopService（）可以让Service（）终止，unBindService（）只是让Service与Activity
    与Service解绑，并不能stop。
    绑定方式 : onCreate -> onBind -> onUnbind -> (onDestroy)
    非绑定方式 : onCreate -> onStartCommand -> onDestroy

21、谈谈你对ContentProvider的理解
    进程间通信，增删查改

22、说说ContentProvider、ContentResolver、ContentObserver 之间的关系
23、请描述一下广播BroadcastReceiver的理解
24、广播的分类
    普通广播 : sendBroadcast(intent)
    有序广播 :sendOrderedBroadcast(intent , null);
    有序广播可以在静态注册时设置优先级，也可以在动态注册时在IntentFilter的setProperty
    中设置。

25、广播使用的方式和场景
26、在manifest 和代码中如何注册和使用BroadcastReceiver?
    <receive>

27、本地广播和全局广播有什么差别？
28、BroadcastReceiver，LocalBroadcastReceiver 区别
    LocalBroadcastReceiver 应用内广播。

29、AlertDialog,popupWindow,Activity区别

30、Application 和 Activity 的 Context 对象的区别
    application继承自ContextWrapper，而Activity需要用到主题，所以Activity
    继承自ContextThemeWrapper。

31、Android属性动画特性
    在一定时间内，渐进式地改变一个对象的属性。

32、如何导入外部数据库?
33、LinearLayout、RelativeLayout、FrameLayout的特性及对比，并介绍使用场景。
34、谈谈对接口与回调的理解
35、回调的原理
36、写一个回调demo
37、介绍下SurfView
38、RecycleView的使用

39、序列化的作用，以及Android两种序列化的区别
    类实现序列化接口。Serializable是java提供的序列化接口，采用ObjectInputStream
         和ObjectOutputStream即可轻松实现序列化和反序列化的过程。另外，通过应通过手动
         固定序列化ID值来确保系统不自动使用hash值而导致的反序列化失败。

         Parcelable是Android提供的实现序列化方式的接口。
         一个类实现 Parcelable接口，就需要重写两个方法：writeToParcel(Parcel out, int i)
         (序列化) 、describeContents（）。此外还需一个带 Parcel形参的构造器， 需要一个
         CREATOR 来实现反序列化的操作。

         区别：Serializable包含大量I/O操作，开销大，主要用于存储设备或网络传输的序列化
               Parcelable性能高，主要用于内存的序列化，使用相对麻烦一点。

40、差值器
    根据时间流逝的百分比计算出当前属性值改变的百分比。
    差值器计算出了属性改变的百分比，但还没有计算出属性改变之后的值。

41、估值器
    根据当前属性改变的百分比计算出改变后的属性值。
    估值器根据差值器计算出的百分比确定具体的属性值。

42、Android中数据存储方式