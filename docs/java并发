
1、开启线程的三种方式
    (1)直接继承Thread类，重写run方法。
   （2）实现Runnable接口，重写run方法，创建该实例作为Thread的target。
   （3）创建FutureTask类，包装Callable接口并重写里面的call方法，将FutureTask
        作为target。
    使用接口实现，多线程可以共享target。

2、线程和进程的区别？
   进程 : 有独立的地址空间，独立的功能，是系统资源分配和调度的独立单元。
   线程 : 进程的组成部分，线程划分尺度小于进程，与父进程的其他线程一起共
          享同一进程下的资源。

3、为什么要有线程，而不是仅仅用进程？
   进程间不能共享内存，而线程间隔离度小，可共享进程资源。多线程可以使同一
   个进程内并发处理多个任务。

4、run()和start()方法区别
   start()是开启线程的正确方法，调用该方法后，线程开始等待JVM调度。run()
   是执行体，调用不会使新线程启动，跟在原线程启动一个普通方法没有区别。

5、如何控制某个方法允许并发访问线程的个数？
   使用定长的阻塞队列 BlockingQueue，当添加元素时队列已满或取元素是队列已空，都会导致当
   前线程阻塞。阻塞队列内部使用可重入锁进行阻塞，添加及删除元素均需先获得锁。

6、在Java中wait和sleep方法的不同；
   Join() : 当一个线程调用另一个线程的Join方法时，被调用线程将会阻塞，知道调用者执行完毕。
   sleep（） : 线程睡眠，线程内调用此方法，线程将自动无条件进入阻塞状态。 当前线程不会释
               放锁。
   yield（） : 线程让步，是当前线程重新回到就绪状态，让JVM根据各线程优先级重新调度。当前
               线程不会释放锁。
   wait() : 线程等待，用同步监视器调用该方法，会使当前线程进入等待状态，《并释放锁》，直
            到其他线程notify唤起（线程通信）。
   notify（） : 当前线程放弃锁定后，唤起任意一个等待的线程。
   notifyAll（） : 当前线程放弃锁定后，唤起监视器上所有等待的线程。

   wait()、notify（）、notifyAll（）属于 java基类 Object，一般与同步代码块或
   同步方法一起使用，并且同步监视器是这 3个方法所在的对象。

7、谈谈wait/notify关键字的理解
   线程间通信，一个是等待并释放锁，另一个是唤起等待的线程。

8、什么导致线程阻塞？
   sleep方法主动进入阻塞状态。
   线程调用了阻塞式IO方法，方法返回前是阻塞状态。
   在等待获取同步监视器是处于阻塞状态。
   调用wait方法等待notify过程中。
   调用suspend方法挂起时。

9、线程如何关闭？
   调用stop（）方法结束线程 。
   新版本的jdk提供了interrupt()方法标记中断，重要的线程不理会中断，大部分
   情况会会将中断作为终止请求。

10、讲一下java中的同步的方法
    同步方法、同步代码块、同步锁。

11、数据一致性如何保证？
    同步

12、如何保证线程安全？
    互斥同步，非阻塞同步：CAS

13、如何实现线程同步？
    同步方法、同步代码块、同步锁。

14、两个进程同时要求写或者读，能不能实现？如何防止进程的同步？

15、线程间操作List
    List不安全，可用Collections类实现安全。

16、Java中对象的生命周期

17、Synchronized用法
    同步方法、同步代码块。

18、synchronize的原理
    java中的每一个对象内部都有一个同步锁，如果使用synchronize来声明一个方法，那么
    对象的锁将保护整个方法。

19、谈谈对Synchronized关键字，类锁，方法锁，重入锁的理解
20、static synchronized 方法的多线程访问和作用
21、同一个类里面两个synchronized方法，两个线程同时访问的问题
    两个synchronized方法共享一个锁，存在互斥。

22、volatile的原理
    java的内存模型: 线程间的共享变量存在主存中，每个线程都有一个私有的本地内存，本地
    内存存贮了共享变量的副本。这只是一个抽象概念。
    被volatile修饰的变量，当一个线程改变变量的值时，该变量的值马上被更新到主存当中，
    这样其他线程立即可见。另外，volatile将禁止使用指令重排序。

23、谈谈volatile关键字的用法
    volatile不保证原子性。（例 : A++ 由三个操作，读值、加一和写入内存，volatile不能保证
            CPU在一个线程内连续完成了三个操作，有可能读完值就跑到别的线程取执行任务了）
    volatile用于修饰被并发访问修改的变量。使用上由两个条件：
    （1）变量的写操作不会依赖于当前值，不能是自加自减的操作。
    （2）该变量没有包含在具有其它变量的不变式中（该变量的大小不依赖于其他变量）

24、谈谈NIO的理解


25、synchronized 和volatile 关键字的区别
    synchronized用于同步一段代码，安全性较高，但同步开销大。
    volatile 用于修饰多线程并发访问的变量，性能优于synchronized。但volatile关键字
    无法保证操作的原子性，在使用上有条件限制，安全性差于synchronized。

26、synchronized与Lock的区别
    synchronized方法隐式地使用当前对象作为同步监视器，Lock显示地使用Lock对象作为
    同步锁。
    Lock显示地加锁解锁。
    Lock还提供了中断锁lockInterruptibly()及超时锁的tryLock（）等方法。

27、ReentrantLock 、synchronized和volatile比较
    ReentrantLock 的使用比synchronized更加灵活，有等多的操作方法可用，synchronized
    的使用则比ReentrantLock更加的简洁方便。

28、ReentrantLock的内部实现
29、lock原理

30、死锁的四个必要条件？
    死锁 : 两个或两个以上的线程在执行的过程中，因争夺资源而造成的一种等待的现象。
    四个条件（缺一不可） : 互斥条件、请求和保持、不可剥夺、循环等待。

31、怎么避免死锁？
    打破四个条件之一即可。
    在在适当时机释放锁。

32、对象锁和类锁是否会互相影响？
    不会，对象锁和类锁是两个锁，一个线程可以同时拥有这两个锁。
    如果一个对象里有两个同步方法，那么这两个同步方法共享一个对象锁，两者会互相影响。
    获取类锁的三种方式 : 声明synchronized静态方法、同步代码块使用静态变量作为同步监
    视器、使用XX.class作为监视器。

33、什么是线程池，如何使用?
34、Java的并发、多线程、线程模型
35、谈谈对多线程的理解
36、多线程有什么要注意的问题？
37、谈谈你对并发编程的理解并举例说明
38、谈谈你对多线程同步机制的理解？
39、如何保证多线程读写文件的安全？
40、多线程原理
    conn.setRequestProperty("Range", "bytes=" + 500 + "-" + 1000);
41、断点续传的实现

1、什么是可重入性，为什么说synchronized是可重入锁。
2、请谈谈ThreadLocal是怎么解决并发安全的。