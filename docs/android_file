


/********** Context ***********/

   Context是一个抽象类，其实现类时ContextImpl。ContextWrapper包含了ContextImpl，是其装饰类。
   ContextThemeWrapper、service及application都继承自ContextWrapper，而Activity需要用到主题，
   所以Activity继承自ContextThemeWrapper。

   在manifest的activity中有一个allowTaskReparenting的属性，此属性的设置可使activity具有转移属性，
   可使该activity加入别的进程中。

   Window是一个抽象类，其实现类是PhoneWindow，用于管理View。WindowManager的实现类为WindowManagerImpl。
   WindowManager对Window的操作交由WMS来处理，二者通过Binder跨进程通信。

   被volatile修饰的变量能够保证每个线程能够获取变量的最新值，从而避免出现数据脏读 的现象。

   Android studio使用Gradle wrapper来集成Gradle的Android插件
   项目的build.gradle里配置项目的整体属性，例如代码仓库及Gradle插件版本等
   gradle-wrapper.properties用于配置Gradle wrapper及版本
   gradle.properties配置Gradle的编译参数
   settings.gradle用于Gradle的多项目管理
   Local.properties用于配置SDK location

   compileSdkVersion配置编译该模块的SDK版本
   minSdkVersion App支持的最低的SDK版本
   targetSdkVersion 基于哪个SDK版本进行的开发

   当多个module配置一样，可以使用全局配置

   Gradle的依赖传递可能会产生冲突的现象，可以使用依赖排除的办法

   /******************************************************/
   Glide通过一系列的链式操作来对图片加载相关参数进行配置
     RequestManager with(Context context);
          方法进行一些初始化操作，获得Glide单实例。该方法返回RequestManager实例，
          有多个重载方法。可以以Activity及Fragment作为参数据此来确定和管理任务的
          生命周期。所以，一般不建议使用Context或Application作为参数。
     RequestBuilder load(String url);
          该方法属于第一步得到的RequestManager实例，由多种重载方法，返回RequestBuilder
          实例。该实例的 diskCacheStrategy();方法及skipMemoryCache（）；方法分别对磁盘
          缓存及内存缓存进行参数配置（新版本Glide使用apply()方法进行配置）。此外，通过该
          实例还可以设置占位图及加载错误是显示的图片等。
     into();
          用于执行相关核心操作，通过Engine实例进行缓存操作及网络加载的核心方法。
          Engine分别从loadFromCache（）和loadFromActiveResources（）方法中获取弱引用
          缓存及基于LruCache的强引用缓存。若两者都没有数据，则将任务打包丢给线程池进行
          磁盘缓存的读取或者执行网络请求。
     Glide的内存缓存是基于框架LruCache的，磁盘缓存则是基于DiskLRUCache框架，而网络加载
          则基于HttpUrlConnection。Glide对三个这工具进行了层层的包装。Glide的内存缓存
          有弱应用缓存和LruCache缓存两种，用户可以设置是否使用LruCache缓存。磁盘缓存也
          可以设置，主要有4这种缓存策略（新版本有所不同），可以选择缓存原图，也可以选择
          缓存缩略图，可以两者都选，也可以不用磁盘缓存。原图和缩略图有不同的key值。

     /*****************************  设计模式的六大原则    *********************************/
     1、单一职责原则：提倡一个类职责单一。
     2、开闭原则：对外扩展开放，对内修改封闭。提倡扩展，不提倡修改。
     3、里氏替换原则：提倡使用抽象类或节后作为模板来扩展不同的子类。另外，提倡用父类（基类）
        对变量进行声明，然后给变量赋以子类的实例。（体现了java三大特征的继承和多态）
     4、依赖倒置原则：高层不依赖于底层的实现细节，使用抽象隔离（抽象类或接口）
     5、迪米特原则：接口隔离，最少知识原则。模块间尽量最少知道对方的实现细节。
     6、接口隔离原则：提倡实现接口设计精细化，避免臃肿。接口成员收紧权限。

     设计模式

     1、单例模式
        静态内部类模式：只有在显式调用静态内部类的时候虚拟机才会对该静态内部类进行类加载，避免
        不必要的资源消耗的问题。虚拟机在进行类加载时会有加锁和同步的操作，同一个加载器下一个类
        只会被加载一次，确保静态内部类单例模式是线程安全的。静态内部类的类加载只会加载一次，所
        以此模式保证了静态变量的唯一性。

     2、工厂方法模式
        工厂方法模式有四部分组成：抽象产品、抽象工厂、具体产品、具体工厂。
        工厂模式的核心是通过泛型传入产品的类型，然后通过获取类型的类名，再通过反射来创建相对应
        的产品实例并返回。工厂模式下将产品抽象化是必不可少的。工厂的模式则可以有单工厂模式和多
        工厂模式。单工厂模式下就是通过泛型及反射抽象地创建实例，多工厂模式下单个工厂创建单个对
        应的产品。因此多工厂模式下，必须将工厂抽象化，以扩展不同的工厂实例。而单工厂模式下创建
        抽象工厂是非必需的。尽管如此，还是提倡无论如何都将工厂抽象化，这也有利于工厂提升工厂的
        可扩展性。

     3、建造者Builder模式
        建造者模式适用于多参数复杂对象的构建，使用不同的部件可以产生不同效果的情形。Builder封
        装了复杂的对象构建过程，对外隐藏了构建细节。是的构建过程与表示过程分离，实现同样的构建
        过程可以创建不同的实例。Builder就是一个创建者，一个组装工程师。在开发当中，这种模式通
        常表现为一系列的用于各种赋值的链式操作，链式操作末端则返回构建完成的对象实例。


    /************************************** java部分 *************************************/
      负数在计算机里以不嘛形式存在，将补码减一得反码，反码取反得原码。

      自加运算符放在操作数左边则先自加再放进表达式运算，放在右边则操作数放进表达式运算再自加。

      三目运算符支持嵌套，不支持多个语句。

      java7增强了控制switch语句的功能，允许控制语句的表达式是字符串。

      java提供了工具类Arrays用以操作数组，包括查找元素索引、拷贝、比较、赋值、排序及打印等。

      如果一个类没有编写构造器，那么系统会为该类提供一个默认的没有参数的构造器。

      对象的引用存放在栈内存里，指向堆内存当中的实例对象。

      java不允许直接访问堆内存当中的对象，只能通过引用来操作对象。

      当堆内存当中没有任何引用指向该对象时，该对象将被当做垃圾回收。

      java里的方法参数传递方式是值传递，系统会为参数分配不同的栈区。对于引用类型的参数传递
      同样如此，传递了引用的复制品，指向同一个对象。

      一个方法中最多只能有一个参数可变的形参，并且该形参位于参数列表最后。

      方法调用的自身为递归方法，递归一定要向已知方向递归。

      类的使用过程：加载、验证、准备、解析、初始化。

      系统在第一次使用一个类时，加载并初始化该类，在类的准备阶段为类分配内存空间并指定初始值。

      java允许使用实例作为类变量的主调，但其底层仍是通过类名作为主调。所以建议使用类成员时，用
      类名作为主调。

      实例变量在创建实例时即分配内存空间，而局部变量需显示初始化后才能使用，局部变量定义时系统
      并未为其分配存储空间。

      default -> 包访问权限  ， protected -> 包及子类访问权限。

      子类中定义了与父类同名的变量，那么子类中定义的变量会隐藏父类的变量。

      子类不会获得父类的构造器，但子类可以调用父类构造器的代码。

      如果子类的构造器里没有显示地调用父类的构造器，那么系统将在执行子类构造器之前隐式地调用父
      类的无参构造器。创建任何对象最先执行的总是基类java.lang.Object类的构造器。

      /**** 多态 ****/
      引用变量在编译时，其类型由声明该变量的类型决定。运行时则由赋给该变量的对象决定。相同类型
      的变量在调用同一方法时表现出不同的行为特征即为多态。

      java允许把一个子类对象直接赋给一个引用变量，当运行时调用子类的方法时，其方法总是表现出了
      子类的行为特征。对象的实例变量则不具备多态性，实例变量总是与声明类型属性一致。

      引用变量只能调用它声明类型的方法（只有声明才能使用），而不能调用运行时的方法，如需调用
      则需强转。

      instanceOf的两个操作数要么类相同，要么有继承关系，否则会报错。

      new一个字符串对象时，对象被保存在运行时内存区，不会放入常量池。

      字符串的equals方法用于判断两个字符串的字符是否相等，而“==”用于判断两个字符串是否是同一
      个字符串，即是否有相同的地址。

      final修饰的变量必须显示地指定初始值，该变量的值在编译时即被确定下来，那么该final变量
      就是一个宏变量。final方法不能被重写，final类不能被继承。

      接口可以实现多继承，借口只能继承接口。

      非静态内部类必须寄生在外部类实例里，属于实例成员，不能持有静态成员。外部类的类名作为
      一个命名空间，作为内部类类名的限制。

      接口没有构造器，不能直接创建对象。

      java8之前，被局部内部类或匿名内部类访问的局部变量必须使用final修饰，java8之后局部变
      量被上述类使用时将默认其使用final修饰。

      函数式接口代表只含一个抽象方法的接口。

      接口与抽象类的区别：接口作为多模块间的耦合标准，用于模块间的通信，是一种通信标准，而
      抽象类是一种模板化的设计，作为子系统的一种设计规范。另外，接口可实现多继承，而抽象类
      遵循单继承原则。

      java5不允许把对象丢进类型未知的集合里，所以允许在创建集合时指定集合元素的类型。

      把一个具有泛型信息的对象赋给一个没有泛型信息的变量时，尖括号的泛型信息将被扔掉，即为
      类型擦除。

      一个线程死了之后，不可再作为线程执行，不可再调用start（）方法。

      /***********************************  Android部分  ************************************/
      /******** AIDL进程间通信 *********/
      1、实现序列化接口
         将所要传递对象的类实现可序列化接口Parcelable。一个类实现 Parcelable接口，就需要重
         写两个方法：writeToParcel(Parcel out, int i)(序列化) 、describeContents（）。
         此外还需一个带 Parcel形参的构造器，以实现 CREATOR 内部的反序列化对象的创建。
         该接口实现类应与相关AIDL接口有相同的包名。

      2、创建AIDL接口
         第一步，新建一个和自定义Parcelable接口同名的AIDL文件，并声明它是Parcelable类型。
         第二步，创建AIDL接口，在接口中定义传递可序列化对象的抽象方法。创建接口有以下注意事项：
               包名要与其他类及相关接口的包名要保持一致。
               AIDl特性，即使所用到的类与本接口同属一个包，仍然要引入该类声明，否则报错。
               AIDL抽象方法中的形参必须标上方向in或out，表示输入或输出。

      3、服务端实现
         AIDL接口文件所生成的对应的java接口里有一个Stub静态内部类， 该类继承自Binder，所以
         实现该类的实例就可作为Binder由服务器返回客户端实现进程间通信。

      4、客户端实现
         客户端正常绑定服务端即可，跨应用的绑定使用intent.setComponent();方法即可。AIDL生成
         的通信接口的静态内部类里有一个静态方法asInterface（）；可以将客户端绑定服务端
         的ServiceConnection所返回的 IBinder转换成通信接口，以实现客户端的相关进程间通信操作。

      /******** Binder的组成 *********/
      DESCRIPTOR : Binder 的唯一标识。

      asInterface(IBinder binder) :用于将服务端返回的Binder转换成客户端所需的AIDL接口类型的
      对象。 asInterface的内部实现时区分进程的，通过Binder的queryLocalInterface(DESCRIPTOR)
      判断，如果客户端和服务端在同一进程内，在共享内存的情况下，asInterface方法返回AIDL接口类
      型的对象本身，否则将返回实现了AIDL接口类型的Stub.Proxy代理类对象。该代理类是实现进程间
      通信的核心，该类实现了与内核通信的相关方法。客户端与服务端的跨进程通信时通过底层内核实现
      的。
      asInterface方法返回的是进程间通信接口的代理类对象。

      onTransact(): 运行在服务端的Binder线程池当中，当远程客户端通过Binder的transact方法发起
      远程请求后，服务端会触发该方法，并处理相关请求。该方法参数有包含客户端请求的方法代码code，
      包含客户端请求的方法参数的Parcel对象及包含返回给客户端返回值的Parcel。onTransact方法的布尔
      型返回值决定客户端的请求成功与否，可用于权限控制。

      /********* View事件传递机制 **********/

      一个事件序列经历了分发、拦截和消耗三个过程，一个事件序列指手指从接触屏幕到离开屏幕的一系列
      过程。
      事件传递给一个ViewGroup后，dispatchTouchEvent()会被调用开始分发事件，事件交给
      onInterceptTouchEvent()方法决定是否拦截，如果该方法返回false则表示当前ViewGroup不拦截事件，
      此时将调用子View的dispatchTouchEvent()方法，将事件交由子View分发处理。如果拦截方法返回true
      那么事件将交由本ViewGroup的onTouchEvent处理，决定是否消耗该事件。View没有onInterceptTouchEvent
      方法，一旦事件传递给它，则默认由它处理。
      点击事件由Activity逐级往下分发，父布局默认不拦截事件。若子View的onTouchEvent不拦截事件，则
      事件往上逐级传递。
      滑动冲突与事件分发有关，解决滑动冲突解释根据具体逻辑来手动拦截事件。具体地讲就是重写ViewGroup
      的onInterceptTouchEvent()方法手动改变事件的拦截规则。

      当子View的onTouchEvent方法返回false，则表明当前的View不消耗事件，事件将交由父布局的onTouchEvent
      消耗。
      requestDisallowInterceptTouchEvent（boolean in）；用于禁止当前的布局拦截事件，标志位默认为false
      如果设置为true，布局的onInterceptTouchEvent（）将不会拦截事件。
      开发过程当中一般将ACTION_DOWN事件交给子View去处理，子View通过自身逻辑决定是否拦截后续事件，或者
      是否消耗事件。
